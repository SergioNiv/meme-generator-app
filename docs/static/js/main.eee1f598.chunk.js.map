{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","line1","setLine1","line2","setLine2","imagen","setLImg","className","onChange","target","value","type","name","placeholder","autoComplete","disabled","onClick","html2canvas","document","querySelector","then","canvas","img","toDataURL","link","createElement","download","href","click","id","style","backgroundImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oQAkGeA,MA9Ff,WACC,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAeC,EAAf,KAsBA,OACC,sBAAKC,UAAU,MAAf,UACC,oBAAIA,UAAU,wBAAd,gCACA,mBAAGA,UAAU,QAAb,uCACA,yBAAQC,SAlBgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5BH,EAAQG,EAAOC,QAiBd,UACC,wBAAQA,MAAM,OAAd,4BACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,UAAd,6BACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,gBAAd,2BACA,wBAAQA,MAAM,QAAd,0BAED,uBACA,gCACC,uBACCC,KAAK,OACLC,KAAK,SACLC,YAAY,UACZL,SAtCoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC1BP,EAASO,EAAOC,QAsCbI,aAAa,MACbP,UAAU,eACVQ,UAAWV,IAGZ,uBACA,uBACCM,KAAK,OACLC,KAAK,SACLC,YAAY,UACZL,SA9CoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC1BL,EAASK,EAAOC,QA8CbI,aAAa,MACbP,UAAU,eACVQ,UAAWV,OAIb,uBAEW,KAAVJ,GAA0B,KAAVE,EAChB,wBAAQI,UAAU,mBAAmBQ,UAAQ,EAA7C,6DAIA,wBAAQR,UAAU,mBAAmBS,QArDhB,WACvBC,IAAYC,SAASC,cAAc,UAAUC,MAAK,SAACC,GAClD,IAAIC,EAAMD,EAAOE,UAAU,aACvBC,EAAON,SAASO,cAAc,KAClCD,EAAKE,SAAL,eAAwBrB,EAAxB,QACAmB,EAAKG,KAAOL,EACZE,EAAKI,YA+CJ,0BAIW,KAAXvB,EAEA,sBACCwB,GAAG,OACHC,MAAO,CACNC,gBAAgB,wCAAD,OAA0C1B,EAA1C,WAHjB,UAMC,qBAAKE,UAAU,SAAf,SACC,+BAAON,MAER,qBAAKM,UAAU,SAAf,SACC,+BAAOJ,SAIT,mBAAGI,UAAU,mBAAb,kDChFWyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SAM1BX,M","file":"static/js/main.eee1f598.chunk.js","sourcesContent":["import html2canvas from 'html2canvas';\nimport { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\tconst [line1, setLine1] = useState('');\n\tconst [line2, setLine2] = useState('');\n\tconst [imagen, setLImg] = useState('');\n\n\tconst handleOnchange1 = ({ target }) => {\n\t\tsetLine1(target.value);\n\t};\n\tconst handleOnchange2 = ({ target }) => {\n\t\tsetLine2(target.value);\n\t};\n\tconst handleOnchangeImg = ({ target }) => {\n\t\tsetLImg(target.value);\n\t};\n\n\tconst handleBtnExport = () => {\n\t\thtml2canvas(document.querySelector('#meme')).then((canvas) => {\n\t\t\tvar img = canvas.toDataURL('image/png');\n\t\t\tvar link = document.createElement('a');\n\t\t\tlink.download = `meme-${imagen}.png`;\n\t\t\tlink.href = img;\n\t\t\tlink.click();\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h3 className=\"mt-4 mb-4 text-center\">Generador de memes</h3>\n\t\t\t<p className=\" mb-2\">Selecciona tu background:</p>\n\t\t\t<select onChange={handleOnchangeImg}>\n\t\t\t\t<option value=\"fire\">Casa en llamas</option>\n\t\t\t\t<option value=\"futurama\">Futurama</option>\n\t\t\t\t<option value=\"history\">History Channel</option>\n\t\t\t\t<option value=\"matrix\">Matrix</option>\n\t\t\t\t<option value=\"philosoraptor\">Philosoraptor</option>\n\t\t\t\t<option value=\"smart\">Smart Guy</option>\n\t\t\t</select>\n\t\t\t<br />\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"linea1\"\n\t\t\t\t\tplaceholder=\"Linea 1\"\n\t\t\t\t\tonChange={handleOnchange1}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tdisabled={!imagen}\n\t\t\t\t/>\n\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"linea2\"\n\t\t\t\t\tplaceholder=\"Linea 2\"\n\t\t\t\t\tonChange={handleOnchange2}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tdisabled={!imagen}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<br />\n\n\t\t\t{line1 === '' && line2 === '' ? (\n\t\t\t\t<button className=\"btn btn-success \" disabled>\n\t\t\t\t\tEscribe un texto en la linea 1 o 2 para guardar\n\t\t\t\t</button>\n\t\t\t) : (\n\t\t\t\t<button className=\"btn btn-success \" onClick={handleBtnExport}>\n\t\t\t\t\tGuardar meme\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{imagen !== '' ? (\n\t\t\t\t//para desarrollo en local usar /img-memes/${imagen}.jpg\n\t\t\t\t<div\n\t\t\t\t\tid=\"meme\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundImage: `url(\"../meme-generator-app/img-memes/${imagen}.jpg\")`,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"line-1\">\n\t\t\t\t\t\t<span>{line1}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"line-2\">\n\t\t\t\t\t\t<span>{line2}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<p className=\"mt-5 text-center\">\"Ningun background seleccionado\"</p>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}